Notes Week 1:
- git: clone -> checkout -> mkdir -> add (add to be commited) -> commit (only committed to local repo) -> push (pushed to github)
-   HTML -> Gives structure -> what's the title, how many paras, etc. 
	CSS  -> styling and colours
	Javascript -> behaviour -> what happens after html doc finishes loading. 
- Meta tags in HTML tags communicate information TO THE BROWSER.
- HTML block (phrasing content) and inline (flow content) tags:
	-> <div> -> block tag. Will be on a new line by default. Can include inline tags + block tags
	-> <span> -> inline tag. Will be on the same line by default. Can only inlcude other inline tags, not block tags
- HTML character entity references:
	-> use &lt; for "<"
		   &gt; for ">"
		   &amp; for &
		   &quot; for "" incase the encoding of the page is not UTF-8 and quotes get messed up. 
		   &nbsp; to include unbreakable spaces between words. eg: victory&nbsp;nor&nbsp;defeat. "victory nor defeat" will now be treated as one chunk of words. When resizing the page, they will not be word-wrapped. 
- <a href = "...." target = "_blank" title = "Some title" </a>
	-> target = "_blank" opens the link in a new page. 
	-> Should have a title as it helps the visually impaired people. 
- Fragment identifier: gets included in the url as well. 
	<a href = "#section2">#section2</a> ---> link to section within the same page
	...
	<section id = "section2">
	....
	....
	</section>

	ooorrrr
	can define section like this too:
	<div> 
	<a name = "section2"> Section 2 </a>
	</div>

	-> Can also use this to go back to the top of the same page from the section.  

	Notes:
	1. Can simulate low network speed to see how pages would load with slow internet. 
		-> Open that Chrome Dev settings page -> Network -> Change from No Throttling to GPRS (50kb/s)


==========================================================================================================================================================
==========================================================================================================================================================

															*****	 Week 2 - CSS	*****

CSS Basics
==========
<html>
	<head>
		<title> ... </title>
		<style> ... </style>
	</head>
	<body>
		...
	</body>
</html>

- Element Selector: 
	eg: p {
			color : blue;
		} 
		==> every paragraph in the html doc will be blue. 

- Class selector: 
	eg: .blue {
			color : blue;
		}

		and then we can apply this class to any element. 
		<p class = "blue"> ... </p>
		<div class = "blue"> ... </div>

- id selector: very specifc

	eg: #name {
			color : blue;
		}

		this is the id of some specific element

		<p> ... </p>
		<div id = "name"> ... </div>

- Can group selectors too! Wow!
	eg: div, .blue {
			color : blue;
		}	

		<p class = "blue"> ... </p> 
		<p> ... </p>
		<div> ... </div> 

- Element with Class Selector
	eg: p.big {
			font=size : 20px;
		}

		Only <p>s with class big with have this style. 
		<p class = "big"> ... </p>
		<div class = "big"> ... </div>
		<p> ... </p>							---> this guy won't have the styling. 


- Child selector
	eg: article > p {
			color : blue;
		}

		<p> that is a DIRECT child of <article> will have this styling. 
		If <p> is contained in <div> that is contained in <article> i.e. <p> is the grandchild of <article>, then styling is not applied to <p>

		<article>...
			<p>...</p>			--> yes styling
		</article>
		...
		<p>...</p>             	--> won't have styling
		<article>
			<div>
				<p>...</p>     	--> won't have styling
				...
			</div>
		</article>


- Descendent selector 
	eg: article p {
			color : blue;
		}

		Every <p> that is inside (at any level) of <article> 

- eg: 	.colored p {
			color : blue;
		}

		Every <p> that is inside any element with class = "colored"


- eg: 	article > .colored {
			color : blue;
		}

		Every element with class = "colored" that is a direct child of <article> 

- Can apply multiple classes to an element:
	eg.: <div class = "mainpoint highlight"> ... </div>


- Pseudo-class selectors: In case regular selectors can't be used, or if we want to style based on user interaction, eg. when a user hovers over something. 
	-> Usage: selector:pseudo-class{
					...
				}

		eg: a:link, a:visited {

			}

			a:link --> an unclicked link. 
			a:visited --> a link that has been clicked on
			We can have different stylings for both

			a:hover, a:active {

			}

			a:hover --> user is hovering over the element
			a:active --> user has clicked on the element, but hasn't released the mouse yet. 


		nth-child selector helped us to target a particular item in a list (doesn't necessarily need to be a list) and stlye for it. 
		eg: header li:nth-child(3) {

			}	

			section div:nth-child(odd) {					---> all the odd divs under section 

			}

			section div:nth-child(4):hover {

			}


- Star selector:
	eg: * {
			box-sizing: border-box;
		}

		This applies the styling to every element in the html. 



=========================================================================================================================================================

CSS Rules Conflict Resolution and Text Styling
==============================================


- Inline styling: use for quick testing
	eg: <p style="text-align:center; color:blue; ..."> ... </p>

- External stylesheets: if you have a website with multiple html pages and want the same styling for all. 
	<html>
		<head> 
			<title> ... </title>
			<link rel="stylesheet" href="style.css">
		<head>
	</html>


- Conflict resolution:
	1. Origin precedence: (when in conflict) -> Last declaration wins
						  (when no conflict) -> merge


	2. Inheritance: every child inherits the properties which can be overwritten later. 

	3. Specificity: Most specific selector combination wins. How to calculate the specificity score? 
			<p style="...">   >>   id selector   >>   class, pseudo-class, attribute   >>   # of elements 

			eg: div #myPara {		---> 0101					
					color: blue;
				}

			eg: div.big p {         ---> 0012
					color:blue;
				}

			Since, 0101 > 0012, the first selector will be selected. 


			However, if we include !important in any selector, then it will override evvvvvvery rule and use that style. 

			eg: header.navigation p {
					color: blue;
				}

				p.blurb {
					color: red;
				}

				p {
					color: green !important;
				}

				All p's will have color green. 



- Styling Text:
	.style{
		font-family: Arial, Helvetica, sans-serif;    	---> If browser doesn't have Arial, then font will be Helvetica. Default is Serif/Sans-serif
		color: #0000ff;									---> hexadecimal rgb value
		font-style: italic				
		font-weight: 100/400/900/bold 					---> numeric values or bold (==900)
		font-size: 24px;								---> default font size is 16px
		text-transform: uppercase/capitalise;
		text-align: center, left;
	}


	- Sans-serif doesn't have the extra lines on the T (eg. Arial), Serif has embellishments on T (eg. Times New Roman)
	- Pixel -> absolute unit of measurement of size for display. DPI (Dots Per Inch) devices -> 1 pixel = 1 device pixel dot on the display. Higher DPI means sharper images, since more dots (pixels) per inch. 
	- Relative font size -> Can use % or em for relative font size. 2em == 200%, .5em == 50%
						 -> Can also use vw (viewport) for relative fontsize. 1vw = 1% of the viewport width. Hence, the font will change as the width of the browser changes. 

=====================================================================================================================================

The Box Model and Layout
=========================

- The Box Model:
	Margin
	----------------------
	Border 
	----------------
    | Padding
	|  -----------
	|  |	Content |
	|  -----------
	------------------

	1. Browsers by default add a margin of 8px to <body>. This can be overwritten. 
			eg:. #style{
					background-color: blue;
					padding: 10px 10px 10px 10px;
					border: 5px solid black;
					margin: 40px;
					width: 300px;     ---> This is the content's width, without padding and border pxs. Hence, here the actual box's width = 300 + 2 (10 + 5) = 330pxs
				}

				To fix this, change box-sizing to border-box. Then box's width = 300 and content's width will be readjusted to 270px. Border-box is most widely used even in Bootstrap. 

				To avoid changing the box-sizing for evvvvvery element, just use * selector to apply it to every element in the html. Can't use in body style, because box-sizing doesn't get inherited. So even if body has border-box, the div's and the section's may still have content-box. 

	2. Cumulative and Collapsing Margins: 
				margin-top and margin-bottom between two box layouts, will select the greater margin. -> Collapsing margins 
				But if the boxes are beside each other, the margins get added up. -> Cumulative margins
				eg. h1 {
						margin-bottom : 30px;
					}
					#border {
						margin-top : 50px;
					}

					The final margin between the two elements would be 50px (and not 80 pxs).


	3. Content overflow:
			If there is an overflow in the content compared to the box around it (assuming you've fixed the box's width and height to be smaller than the content), then we can choose to either make the overflow visible (default) -> in this case, if there is any content below it, the two contents might merge together, or to hide it (which clips it), or to add scroll bars there. 


- Background properties:
	eg: #bg {
			background-color: blue;
			background-image: url("image.png");
			background-repeat: no-repeat;
			background-position: bottom right;
		}

		or
		#bg {
			background: url("image.png") bottom right blue
		}

- Floating elements - VERY IMPORTANT!
		- Floating an element takes it out of the document flow. 
		- Can float things to the left or the right.
		- If you don't want any floating element to the right of an element, then add clear: right in the styling. 
		- If you don't want any floating elements to both sides of an element, then add clear: both. 
		- Margins do not collapse for floating elements (like they do normally between 2 <p>s where it takes the greater margin instead of adding the two margins.)


		eg: Two Column Design
			<!doctype html>
			<html>
			<head>
				<meta charset="utf-8">
				<title>Two Column Design</title>
				<style type="text/css" media="screen">
					*{
						box-sizing: border-box;
					}
					p{
						width: 50%;
						border: 1px;
						float: left;
						padding: 10px;
					}	
					section{
						background-color: blue;
						/*clear: right;*/
					}
				</style>
			</head>
			<body>
				<h1>Two Column Design</h1>
				<div> 
					<p>Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. </p>
					<p>It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like). It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).</p>
					<section>Test test test</section>
				</div>
			</body>
			</html>

- Relative and Absolute Element Positioning
	1. Static positioning -> normal document flow. This is the default setting for all elements, except for <html>.
						  -> If an element's position is static, then even if we add offsets to its position (eg. left: 50px), it ignores the offsets.
	2. Relative positioning -> If I change the element's position to "relative", and then add left:50px;, then the element changes position. 
							eg.: left: 50px really means move _from_ left by 50px. Hence, the element moves right by 50px. 
							-> These offsets are from the original position of the element in the document.  
							-> Important: The document flow is not broken in this case. Browser still thinks that the element is in its original position, hence all other elements retain thwir positions.  

							eg: p{
									position: relative;
									bottom: -50px;						equivalent to: top: 50px;
									right: -50px;									   left: 50px;
								}

	3. Absolute positioning -> All offsets (top, bottom, left, right) are relative to the position of the nearest ancestor which has positioning set on it, other than static. 
							-> Unlike Relative positioning, the element is taken out of the document flow. So if I change an element's position to absolute, without adding any offsets to it, the element will stay in place, but out of the document flow, so everything else below it will move up like that element is not even present. 
							-> Advantage: If the container element is itself an offset, and it contains other elements inside it that are offsets, if you want to move the container element around, you don't need to move every other element inside it around. They'll move like a group together. 

==============================================================================================================================================================

INTRODUCTION TO RESPONSIVE DESIGN
=================================

1. Media Queries:
	- Different CSS styles for different devices, need to include @media in the styling. 
	- If logical stmt within @media(...) is true, then the style applies.

	eg:
	p{															//base styles - apply irrespective of the media
		color: blue;
	}

	@media (min-width: 768px) and (max-width: 991px){			//AND
			div{
				color: blue;
			}
		}
	@media (max-width: 767px) , (min-width: 992px){              //OR
			div{
				color: blue;
			}
		}

		NOTE: Do not overlap the boundaries. eg. Can't have something like:
		@media (min-width: 1200px){
		...
		}
		@media (min-width: 992px) and (max-width: 1200px) {
		...
		}

		since they are inclusive and then both styles will apply.

	**Quick tip: Can check the width of the browser window by opening up Inspect element and then resizing the window. Can see the size in px on top right.

2. Responsive Design: need because too many devices now. 
	- 12 column grid responsive layout. Since 12 has many evenly spaced factors: 1, 2, 3, 4, 6, 12
	- Can have nested grids.
	- Use %ages (wrt browser width) to achieve fluid width instead of absolute px values. 
	- For mobile phones, a website is by default zoomed out excessively because the mobile's browser isn't sure that the website is resposive. So, in order to tell the mobile device that the html page has taken care of different layouts and styling in a resposive manner, need to add the following meta tag in the head. 
		<head>
			<meta name="viewport" content="width=device-width, inital-scale=1">
		</head>

	eg: <div class="row">
		<div class="col-lg-3 col-md-6"><p>Item 1</p></div>
		<div class="col-lg-3 col-md-6"><p>Item 2</p></div>
		<div class="col-lg-3 col-md-6"><p>Item 3</p></div>
		<div class="col-lg-3 col-md-6"><p>Item 4</p></div>
		<div class="col-lg-3 col-md-6"><p>Item 5</p></div>
		<div class="col-lg-3 col-md-6"><p>Item 6</p></div>
		<div class="col-lg-3 col-md-6"><p>Item 7</p></div>
	</div>

	As the screen size reduces, we would want fewer columns on the screen so that the image/text is readable. Hence, here, larger screens will have 4 columns, but as we reduce the screen size, we want only 2 columns on the screen. 

===================================================================================================================================================

INTRODUCTION TO TWITTER BOOTSTRAP
=================================

As per Bootstrap:
xl: >=1200px	:: large desktops
lg: >=992px		:: desktops
md: >=768px		:: tablets
sm: >=576px		:: landscape phones
xs: <576px		:: portrait phones 



===================================================================================================================================================

WEEK 3

Things to ask the client:
1. Bring examples of other sites to help the client figure out what they want. 
2. Use less informtion on the site. Less is more. 
3. Have the client invest in the project to at least some extent. Get them to pay for the photography or sommmmmething. Else they won't show much interest in the output. 
4. Have one point of contact only. 
5. If you're doing this for free, limit the number of revisions. If you're doing this for a pay, limit number of free revisions. Every subsequent revision will come at a cost. 



Starting the coding of the website:

1. Can get font from Google fonts. Add that as a <link> to the index.html
2. Use broswer sync: browser-sync start --server --directory --files "**/*"
3. header
	nav -> navbar navbar-default
	container
		navbar-header
		logo-> vertical-md

4. In Bootstrap framework, class pull-left is used to float left.

=====================================================================================================================================================

WEEK 4

JAVASCRIPT:
1. Javascript engine inside a browser is a single-threaded engine => Code executing will be completely executed without interruption from some our Javascript code. 
2. Sequential flow of execution. 
3. <script> can be added anywhere in the html, either in <head> or even inside <body> 
4. Functional language, like C#:
	- var x = "this is a string";
		x can be made an int later too. 
	- how to define a function:
		function a(){
		...
		}
		eg: function compare (x, y) 	---> don't need to specify types of x and y
			var a = compare(4, 5);		---> a will store the result of compare(4, 5)
			compare (4, "a")			---> since types of arguments not given, this is allowed
			compare()					---> in Javascript, all arguments to a function are optional. Hence, this is allowed. 
	- can define functions inside another function. 
5. Scope:
	1. Global scope: variables and functions defined here are available everywhere.
	2. Functional/Lexical scope: variables and functions here are available only here. 

	- Referenced (not defined) variable will be searched for in its current scope first. If not found, the outer reference will be searched, if not found then outer reference's out reference will be searched, until it is searched for in the global scope. If not found in the global scope either, the variable will be declared undefined. 
	eg: Global:
		var x = 2;
		A();

		Function A:
		var x = 5;
		B():

		Function B:
		console.log(x);

		Output -> Even though B is called within A, B is defined in the Global scope. Hence, outer reference of B is global, not A. Hence, x=2 is outputted.

		Doesn't matter where a function is invoked from, what matters is where the function is physically defined.

6. DataTypes:
		- 7 built-in types. 1 Object and 6 Primitive. 
		- Object is a collection of name value pairs. 
		- Primitive: single, immutable value. 
				   : Boolean
				   : Undefined (reserved keyword) -> variable has been declared but has not been defined yet. 
				   : null -> lack of value (undefined is lack of defination)
				   : Number -> double precision 64-bit floating point. Javascript does not have Integer type
				   : String
				   : Symbol 

		NaN -> Not a Number 
			eg: console.log((undefined)/3);			-> o/p: NaN

7. Type coercion: eg: var x = '4';
					  var y = 4;
					  if (x == y){
					  	console.log("Equal");
					  }								--> outputs Equal. 

				Javascript implicitly converts the type of x from string to number to do the comparison. If you want to avoid that, do strict comparison:
				eg: if (x === y){
						console.log("Equal");
					}


				eg: null, undefined, "", 0, NaN -> All get coerced to false. 
				Hence, false || null || undefined || "" || 0 || NaN  				---> evaluates to false


				eg: Following is the way to set default values to a variable:
					function orderChickenWith (sideDish) {
						sideDish = sideDish || "something";						//if sideDish is undefined, it'll be coerced to false. 
						console.log("Chicken with " + sideDish);
					}

					orderChickenWith("noodles");								---> returns Chicken with noodles
					orderChickenWith();											---> returns Chicken with something



8. Curly braces need to be on the same line (whaaaaaa! whoever enforces such a thing!)
		eg: function a()
			{
				return 
				{
					name: "Mittal"
				};
			}

			a(); 										---> This will return undefined! Javascript implicitly adds a semicolon after return because it 														doesn't encounter anything else on that line. Wow.

			Right way to write the function:
				function a(){
					return {
						name: "Mittal"
					};
				}

9. Creating objects:
	eg: var company = new Object();
		company.name = "Facebook";								---> This implicitly creates the "name" property for the company object.
		company.ceo = new Object();
		company.ceo.firstname = "Mark";
		company.["stock of company"] = 110;

		//getters
		console.log(company.ceo.firstname);
		console.log(company["name"]);
		console.log(company.["stock of company"]);


	Can also create objects like (object literal):
	eg: var company = {
			name:"facebook",
			ceo: {
				firstName: "Mark",
				"stock of company": 110							---> if spaces, then add double quotes.
			},
		};

10: Functions:
	- Functions are also first-class data types. Therefore, whatever you can do to datatypes, you can do to functions. Functions are Objects. 
	- Can set properties to functions. 

	eg:
		function multiply(x, y){
			return x * y;
		}

		multiply.version = "v.1.0.0";				// since functions are objects, we can set properties to them. 
		console.log(multiply);						// implicity calls multiply.toString() which returns the whole defn of the function.
		console.log(multiply.version);				// will return v.1.0.0


		//Function factory - functions can be passed around in arguments, can be returned, etc. 
		function makeMultiplier(multiplier){
			var myFunc = function (x){
				return multiplier * x;
			};
			return myFunc;							// returning myFunc function.
		}

		var multiplyBy3 = makeMultiplier(3);
		console.log(multiplyBy3(10));				// will return 30;
		var doubleAll = makeMultiplier(2);
		console.log(doubleAll(100));

		//Can pass functions as arguments too
		function doOperation(x, operation){
			return operation(x);
		}

		var result = doOperation(20, multiplyBy3);
		console.log(result);						

11. Pass by Value bs Pass by Reference:
		- Pass by Value: for primitives like 'var'. 
			eg:	var a = 7;
				var b = a;					//contents of a are copied to contents of b, so now b h0olds 7
				b = 5;						//contents of b are overwritten to 5. But a still holds 7. So a and b are independent. 


		- Pass by reference: for Objects types.
			eg: var a = {x: 7};				//a holds the memory location of the object
				var b = a;					//contents of a are copied to b, hence now b also points to the same object as a
				b.x = 5;					//this would affect the value pointed by a and b, both. This is pass by reference. 


12. Creating static variables in the function...:

	eg: function Circle(radius){
			this.radius = radius;
		}

		Circle.prototype.getArea = function () {
			return Math.PI * Math.pow(this.radius, 2);			// 'this' contains the Windows object
		}

		var myCircle = new Circle(10);
		console.log(myCircle.getArea());

		var myOtherCircle = new Circle(20);
		console.log(myOtherCircle);								// will have the getArea property in its prototype. Set only once. 


13. Arrays: can have varied types
		  : dynamic. don't need to set length at the time of declaration.
	eg: var array = new Array();
		array[0] = "Yaakov";
		array[1] = 2;
		array[2] = function (name){
			console.log("Hello " + name);
		};
		array[3] = {
			course: "HTML",
			location: "Bangalore"
		}

		console.log(array);
		array[2](array[0]);


		//Short hand notation for array declaration:
		var array2 = []; //empty array;
		var names = ["Yaakov", "John", "Joe"];

		//Since dynamic, can set some other index also after declaration
		names[100] = "Jim";

		for(var i = 0; i < names.length; i++){
			console.log("Hello " + names[i]);					//This is output the first 2, then say Hello undefined (97 times), then Hello Jim. Cray.
		}



		//can display the name value pairs of the object like:
		var myObj = {
			name: "Yaakov",
			course: "HTML/CSS/JS",
			platform: "Coursera"
		};

		for (var prop in myObj){
			console.log(prop + ": " + myObj[prop]);
		}


		Buuuuttt.... say I have:
		var names = ["Yaakov", "John", "Joe"];
		names.greeting = "Hi!";									//since arrays are also objects

		for (var name in names){
			console.log("Hello " + names[name]);				//will output: Hello Yaakov
																			   Hello John
																			   Hello Joe
																			   Hello Hi!
		}



IIFEs:
window object?



======================================================================================================================================================

WEEK 5

1. DOM Manipulation: Document Object Manipulation
		- There is a window object that exists in the global scope by default. 
		- document is a property of the "window" object, that holds the entire HTML page. 
		- Can get elements in the HTML through their ids, with the help of this document property. 
		eg: <body>
				<h1 id="title"> Cuisines </h1>
			</body>

			can have the following in the script -> document.getElementById();
			This will return the title element. 

		- Can set HTML elements also:
		eg: function sayHello(){
				var name = document.getElementById("name").value;				//the value inputted in the text box
				var message = "<h2> Hello " + name + "!</h2>";					// to display on the screen

				document.getElementById("content").textContent = message;		//There is a div with id content. Its value will be set to the message, but 																	won't be formatted correctly, i.e. <h2> will also be displayed.

				document.getElementById("content").innerHTML = message;			//This will format the message as expected.


				//Can also get an element using the CSS selectors
				var title = document.querySelector("#title");
			}

2. Event Handlers: Functions that you bind using specifc methods to certain events that happen in the browser. 
		eg: onClick(), onBlur(), page loading etc. 
		- Want to keep HTML page only for content, not to define behaviour. Hence, move it to the script.js files. 
			Hence, instead of:
			<button onclick="sayHello();"> Say it! </button> 
			can insert Unobstrusive Event Handling in the js file:
			document.querySelector("button").addEventListener("click", sayHello);

			Now, the sayHello function's context changes from global context (this = window object) to event's context (this = button element)

			Can also do:
			document.querySelector("button").onclick = sayHello;				//selecting the HTML element, and setting its onclick property to the 
																				// function sayHello. We're not executing it, we're setting the value of the
																				// function. 


			Instead of loading the js files at the end of the html doc, we can add an event listener to listen when all the HTML content gets loaded (before the images and other CSS content is loaded), and create the new event listeners then itself. 

			document.addEventListener("DOMContentLoaded", function(event){
				function sayHello (event){
					...
					...
					
				}
				document.querySelector("button").addEventListener("click", sayHello);
			});	

		- "event" argument has a number of properties like "shiftKey", "clientX", "clientY" etc. which can be used in the js file to add specific behaviour.
		eg: //Want to log the x and y data points of the mouse only when shift key is pressed in the <body> section of the html.
			document.querySelector("body").addEventListener("mousemove", function (event){
				if (event.shiftKey === "true"){
					console.log("x: " + event.clientX);
					console.log("y: " + event.clientY);
				}
			});
